<?php

/**
 * Base class that represents a row from the 'ABPerson' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Sat Mar 14 14:28:43 2009
 *
 * @package    lib.model.om
 */
abstract class BaseAbperson extends BaseObject  implements Persistent {


  const PEER = 'AbpersonPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AbpersonPeer
	 */
	protected static $peer;

	/**
	 * The value for the rowid field.
	 * @var        string
	 */
	protected $rowid;

	/**
	 * The value for the first field.
	 * @var        string
	 */
	protected $first;

	/**
	 * The value for the last field.
	 * @var        string
	 */
	protected $last;

	/**
	 * The value for the middle field.
	 * @var        string
	 */
	protected $middle;

	/**
	 * The value for the firstphonetic field.
	 * @var        string
	 */
	protected $firstphonetic;

	/**
	 * The value for the middlephonetic field.
	 * @var        string
	 */
	protected $middlephonetic;

	/**
	 * The value for the lastphonetic field.
	 * @var        string
	 */
	protected $lastphonetic;

	/**
	 * The value for the organization field.
	 * @var        string
	 */
	protected $organization;

	/**
	 * The value for the department field.
	 * @var        string
	 */
	protected $department;

	/**
	 * The value for the note field.
	 * @var        string
	 */
	protected $note;

	/**
	 * The value for the kind field.
	 * @var        string
	 */
	protected $kind;

	/**
	 * The value for the birthday field.
	 * @var        string
	 */
	protected $birthday;

	/**
	 * The value for the jobtitle field.
	 * @var        string
	 */
	protected $jobtitle;

	/**
	 * The value for the nickname field.
	 * @var        string
	 */
	protected $nickname;

	/**
	 * The value for the prefix field.
	 * @var        string
	 */
	protected $prefix;

	/**
	 * The value for the suffix field.
	 * @var        string
	 */
	protected $suffix;

	/**
	 * The value for the firstsort field.
	 * @var        string
	 */
	protected $firstsort;

	/**
	 * The value for the lastsort field.
	 * @var        string
	 */
	protected $lastsort;

	/**
	 * The value for the creationdate field.
	 * @var        string
	 */
	protected $creationdate;

	/**
	 * The value for the modificationdate field.
	 * @var        string
	 */
	protected $modificationdate;

	/**
	 * The value for the compositenamefallback field.
	 * @var        string
	 */
	protected $compositenamefallback;

	/**
	 * The value for the externalidentifier field.
	 * @var        string
	 */
	protected $externalidentifier;

	/**
	 * The value for the storeid field.
	 * @var        string
	 */
	protected $storeid;

	/**
	 * The value for the displayname field.
	 * @var        string
	 */
	protected $displayname;

	/**
	 * The value for the firstsortsection field.
	 * @var        string
	 */
	protected $firstsortsection;

	/**
	 * The value for the lastsortsection field.
	 * @var        string
	 */
	protected $lastsortsection;

	/**
	 * The value for the firstsortlanguageindex field.
	 * Note: this column has a database default value of: '2147483647'
	 * @var        string
	 */
	protected $firstsortlanguageindex;

	/**
	 * The value for the lastsortlanguageindex field.
	 * Note: this column has a database default value of: '2147483647'
	 * @var        string
	 */
	protected $lastsortlanguageindex;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseAbperson object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->firstsortlanguageindex = '2147483647';
		$this->lastsortlanguageindex = '2147483647';
	}

	/**
	 * Get the [rowid] column value.
	 * 
	 * @return     string
	 */
	public function getRowid()
	{
		return $this->rowid;
	}

	/**
	 * Get the [first] column value.
	 * 
	 * @return     string
	 */
	public function getFirst()
	{
		return $this->first;
	}

	/**
	 * Get the [last] column value.
	 * 
	 * @return     string
	 */
	public function getLast()
	{
		return $this->last;
	}

	/**
	 * Get the [middle] column value.
	 * 
	 * @return     string
	 */
	public function getMiddle()
	{
		return $this->middle;
	}

	/**
	 * Get the [firstphonetic] column value.
	 * 
	 * @return     string
	 */
	public function getFirstphonetic()
	{
		return $this->firstphonetic;
	}

	/**
	 * Get the [middlephonetic] column value.
	 * 
	 * @return     string
	 */
	public function getMiddlephonetic()
	{
		return $this->middlephonetic;
	}

	/**
	 * Get the [lastphonetic] column value.
	 * 
	 * @return     string
	 */
	public function getLastphonetic()
	{
		return $this->lastphonetic;
	}

	/**
	 * Get the [organization] column value.
	 * 
	 * @return     string
	 */
	public function getOrganization()
	{
		return $this->organization;
	}

	/**
	 * Get the [department] column value.
	 * 
	 * @return     string
	 */
	public function getDepartment()
	{
		return $this->department;
	}

	/**
	 * Get the [note] column value.
	 * 
	 * @return     string
	 */
	public function getNote()
	{
		return $this->note;
	}

	/**
	 * Get the [kind] column value.
	 * 
	 * @return     string
	 */
	public function getKind()
	{
		return $this->kind;
	}

	/**
	 * Get the [birthday] column value.
	 * 
	 * @return     string
	 */
	public function getBirthday()
	{
		return $this->birthday;
	}

	/**
	 * Get the [jobtitle] column value.
	 * 
	 * @return     string
	 */
	public function getJobtitle()
	{
		return $this->jobtitle;
	}

	/**
	 * Get the [nickname] column value.
	 * 
	 * @return     string
	 */
	public function getNickname()
	{
		return $this->nickname;
	}

	/**
	 * Get the [prefix] column value.
	 * 
	 * @return     string
	 */
	public function getPrefix()
	{
		return $this->prefix;
	}

	/**
	 * Get the [suffix] column value.
	 * 
	 * @return     string
	 */
	public function getSuffix()
	{
		return $this->suffix;
	}

	/**
	 * Get the [firstsort] column value.
	 * 
	 * @return     string
	 */
	public function getFirstsort()
	{
		return $this->firstsort;
	}

	/**
	 * Get the [lastsort] column value.
	 * 
	 * @return     string
	 */
	public function getLastsort()
	{
		return $this->lastsort;
	}

	/**
	 * Get the [creationdate] column value.
	 * 
	 * @return     string
	 */
	public function getCreationdate()
	{
		return $this->creationdate;
	}

	/**
	 * Get the [modificationdate] column value.
	 * 
	 * @return     string
	 */
	public function getModificationdate()
	{
		return $this->modificationdate;
	}

	/**
	 * Get the [compositenamefallback] column value.
	 * 
	 * @return     string
	 */
	public function getCompositenamefallback()
	{
		return $this->compositenamefallback;
	}

	/**
	 * Get the [externalidentifier] column value.
	 * 
	 * @return     string
	 */
	public function getExternalidentifier()
	{
		return $this->externalidentifier;
	}

	/**
	 * Get the [storeid] column value.
	 * 
	 * @return     string
	 */
	public function getStoreid()
	{
		return $this->storeid;
	}

	/**
	 * Get the [displayname] column value.
	 * 
	 * @return     string
	 */
	public function getDisplayname()
	{
		return $this->displayname;
	}

	/**
	 * Get the [firstsortsection] column value.
	 * 
	 * @return     string
	 */
	public function getFirstsortsection()
	{
		return $this->firstsortsection;
	}

	/**
	 * Get the [lastsortsection] column value.
	 * 
	 * @return     string
	 */
	public function getLastsortsection()
	{
		return $this->lastsortsection;
	}

	/**
	 * Get the [firstsortlanguageindex] column value.
	 * 
	 * @return     string
	 */
	public function getFirstsortlanguageindex()
	{
		return $this->firstsortlanguageindex;
	}

	/**
	 * Get the [lastsortlanguageindex] column value.
	 * 
	 * @return     string
	 */
	public function getLastsortlanguageindex()
	{
		return $this->lastsortlanguageindex;
	}

	/**
	 * Set the value of [rowid] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setRowid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rowid !== $v) {
			$this->rowid = $v;
			$this->modifiedColumns[] = AbpersonPeer::ROWID;
		}

		return $this;
	} // setRowid()

	/**
	 * Set the value of [first] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setFirst($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first !== $v) {
			$this->first = $v;
			$this->modifiedColumns[] = AbpersonPeer::FIRST;
		}

		return $this;
	} // setFirst()

	/**
	 * Set the value of [last] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setLast($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last !== $v) {
			$this->last = $v;
			$this->modifiedColumns[] = AbpersonPeer::LAST;
		}

		return $this;
	} // setLast()

	/**
	 * Set the value of [middle] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setMiddle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->middle !== $v) {
			$this->middle = $v;
			$this->modifiedColumns[] = AbpersonPeer::MIDDLE;
		}

		return $this;
	} // setMiddle()

	/**
	 * Set the value of [firstphonetic] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setFirstphonetic($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->firstphonetic !== $v) {
			$this->firstphonetic = $v;
			$this->modifiedColumns[] = AbpersonPeer::FIRSTPHONETIC;
		}

		return $this;
	} // setFirstphonetic()

	/**
	 * Set the value of [middlephonetic] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setMiddlephonetic($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->middlephonetic !== $v) {
			$this->middlephonetic = $v;
			$this->modifiedColumns[] = AbpersonPeer::MIDDLEPHONETIC;
		}

		return $this;
	} // setMiddlephonetic()

	/**
	 * Set the value of [lastphonetic] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setLastphonetic($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastphonetic !== $v) {
			$this->lastphonetic = $v;
			$this->modifiedColumns[] = AbpersonPeer::LASTPHONETIC;
		}

		return $this;
	} // setLastphonetic()

	/**
	 * Set the value of [organization] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setOrganization($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->organization !== $v) {
			$this->organization = $v;
			$this->modifiedColumns[] = AbpersonPeer::ORGANIZATION;
		}

		return $this;
	} // setOrganization()

	/**
	 * Set the value of [department] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setDepartment($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->department !== $v) {
			$this->department = $v;
			$this->modifiedColumns[] = AbpersonPeer::DEPARTMENT;
		}

		return $this;
	} // setDepartment()

	/**
	 * Set the value of [note] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setNote($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->note !== $v) {
			$this->note = $v;
			$this->modifiedColumns[] = AbpersonPeer::NOTE;
		}

		return $this;
	} // setNote()

	/**
	 * Set the value of [kind] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setKind($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->kind !== $v) {
			$this->kind = $v;
			$this->modifiedColumns[] = AbpersonPeer::KIND;
		}

		return $this;
	} // setKind()

	/**
	 * Set the value of [birthday] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setBirthday($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->birthday !== $v) {
			$this->birthday = $v;
			$this->modifiedColumns[] = AbpersonPeer::BIRTHDAY;
		}

		return $this;
	} // setBirthday()

	/**
	 * Set the value of [jobtitle] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setJobtitle($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->jobtitle !== $v) {
			$this->jobtitle = $v;
			$this->modifiedColumns[] = AbpersonPeer::JOBTITLE;
		}

		return $this;
	} // setJobtitle()

	/**
	 * Set the value of [nickname] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setNickname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nickname !== $v) {
			$this->nickname = $v;
			$this->modifiedColumns[] = AbpersonPeer::NICKNAME;
		}

		return $this;
	} // setNickname()

	/**
	 * Set the value of [prefix] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setPrefix($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prefix !== $v) {
			$this->prefix = $v;
			$this->modifiedColumns[] = AbpersonPeer::PREFIX;
		}

		return $this;
	} // setPrefix()

	/**
	 * Set the value of [suffix] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setSuffix($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->suffix !== $v) {
			$this->suffix = $v;
			$this->modifiedColumns[] = AbpersonPeer::SUFFIX;
		}

		return $this;
	} // setSuffix()

	/**
	 * Set the value of [firstsort] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setFirstsort($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->firstsort !== $v) {
			$this->firstsort = $v;
			$this->modifiedColumns[] = AbpersonPeer::FIRSTSORT;
		}

		return $this;
	} // setFirstsort()

	/**
	 * Set the value of [lastsort] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setLastsort($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastsort !== $v) {
			$this->lastsort = $v;
			$this->modifiedColumns[] = AbpersonPeer::LASTSORT;
		}

		return $this;
	} // setLastsort()

	/**
	 * Set the value of [creationdate] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setCreationdate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->creationdate !== $v) {
			$this->creationdate = $v;
			$this->modifiedColumns[] = AbpersonPeer::CREATIONDATE;
		}

		return $this;
	} // setCreationdate()

	/**
	 * Set the value of [modificationdate] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setModificationdate($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->modificationdate !== $v) {
			$this->modificationdate = $v;
			$this->modifiedColumns[] = AbpersonPeer::MODIFICATIONDATE;
		}

		return $this;
	} // setModificationdate()

	/**
	 * Set the value of [compositenamefallback] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setCompositenamefallback($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->compositenamefallback !== $v) {
			$this->compositenamefallback = $v;
			$this->modifiedColumns[] = AbpersonPeer::COMPOSITENAMEFALLBACK;
		}

		return $this;
	} // setCompositenamefallback()

	/**
	 * Set the value of [externalidentifier] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setExternalidentifier($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->externalidentifier !== $v) {
			$this->externalidentifier = $v;
			$this->modifiedColumns[] = AbpersonPeer::EXTERNALIDENTIFIER;
		}

		return $this;
	} // setExternalidentifier()

	/**
	 * Set the value of [storeid] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setStoreid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->storeid !== $v) {
			$this->storeid = $v;
			$this->modifiedColumns[] = AbpersonPeer::STOREID;
		}

		return $this;
	} // setStoreid()

	/**
	 * Set the value of [displayname] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setDisplayname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->displayname !== $v) {
			$this->displayname = $v;
			$this->modifiedColumns[] = AbpersonPeer::DISPLAYNAME;
		}

		return $this;
	} // setDisplayname()

	/**
	 * Set the value of [firstsortsection] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setFirstsortsection($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->firstsortsection !== $v) {
			$this->firstsortsection = $v;
			$this->modifiedColumns[] = AbpersonPeer::FIRSTSORTSECTION;
		}

		return $this;
	} // setFirstsortsection()

	/**
	 * Set the value of [lastsortsection] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setLastsortsection($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastsortsection !== $v) {
			$this->lastsortsection = $v;
			$this->modifiedColumns[] = AbpersonPeer::LASTSORTSECTION;
		}

		return $this;
	} // setLastsortsection()

	/**
	 * Set the value of [firstsortlanguageindex] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setFirstsortlanguageindex($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->firstsortlanguageindex !== $v || $v === '2147483647') {
			$this->firstsortlanguageindex = $v;
			$this->modifiedColumns[] = AbpersonPeer::FIRSTSORTLANGUAGEINDEX;
		}

		return $this;
	} // setFirstsortlanguageindex()

	/**
	 * Set the value of [lastsortlanguageindex] column.
	 * 
	 * @param      string $v new value
	 * @return     Abperson The current object (for fluent API support)
	 */
	public function setLastsortlanguageindex($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->lastsortlanguageindex !== $v || $v === '2147483647') {
			$this->lastsortlanguageindex = $v;
			$this->modifiedColumns[] = AbpersonPeer::LASTSORTLANGUAGEINDEX;
		}

		return $this;
	} // setLastsortlanguageindex()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(AbpersonPeer::FIRSTSORTLANGUAGEINDEX,AbpersonPeer::LASTSORTLANGUAGEINDEX))) {
				return false;
			}

			if ($this->firstsortlanguageindex !== '2147483647') {
				return false;
			}

			if ($this->lastsortlanguageindex !== '2147483647') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->rowid = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->first = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->last = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->middle = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->firstphonetic = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->middlephonetic = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->lastphonetic = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->organization = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->department = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->note = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->kind = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->birthday = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->jobtitle = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->nickname = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->prefix = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->suffix = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->firstsort = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->lastsort = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->creationdate = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->modificationdate = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->compositenamefallback = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->externalidentifier = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->storeid = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->displayname = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->firstsortsection = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->lastsortsection = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->firstsortlanguageindex = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->lastsortlanguageindex = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 28; // 28 = AbpersonPeer::NUM_COLUMNS - AbpersonPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Abperson object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AbpersonPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AbpersonPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAbperson:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AbpersonPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			AbpersonPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseAbperson:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAbperson:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AbpersonPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseAbperson:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			AbpersonPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AbpersonPeer::ROWID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AbpersonPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setRowid($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AbpersonPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = AbpersonPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AbpersonPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getRowid();
				break;
			case 1:
				return $this->getFirst();
				break;
			case 2:
				return $this->getLast();
				break;
			case 3:
				return $this->getMiddle();
				break;
			case 4:
				return $this->getFirstphonetic();
				break;
			case 5:
				return $this->getMiddlephonetic();
				break;
			case 6:
				return $this->getLastphonetic();
				break;
			case 7:
				return $this->getOrganization();
				break;
			case 8:
				return $this->getDepartment();
				break;
			case 9:
				return $this->getNote();
				break;
			case 10:
				return $this->getKind();
				break;
			case 11:
				return $this->getBirthday();
				break;
			case 12:
				return $this->getJobtitle();
				break;
			case 13:
				return $this->getNickname();
				break;
			case 14:
				return $this->getPrefix();
				break;
			case 15:
				return $this->getSuffix();
				break;
			case 16:
				return $this->getFirstsort();
				break;
			case 17:
				return $this->getLastsort();
				break;
			case 18:
				return $this->getCreationdate();
				break;
			case 19:
				return $this->getModificationdate();
				break;
			case 20:
				return $this->getCompositenamefallback();
				break;
			case 21:
				return $this->getExternalidentifier();
				break;
			case 22:
				return $this->getStoreid();
				break;
			case 23:
				return $this->getDisplayname();
				break;
			case 24:
				return $this->getFirstsortsection();
				break;
			case 25:
				return $this->getLastsortsection();
				break;
			case 26:
				return $this->getFirstsortlanguageindex();
				break;
			case 27:
				return $this->getLastsortlanguageindex();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AbpersonPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getRowid(),
			$keys[1] => $this->getFirst(),
			$keys[2] => $this->getLast(),
			$keys[3] => $this->getMiddle(),
			$keys[4] => $this->getFirstphonetic(),
			$keys[5] => $this->getMiddlephonetic(),
			$keys[6] => $this->getLastphonetic(),
			$keys[7] => $this->getOrganization(),
			$keys[8] => $this->getDepartment(),
			$keys[9] => $this->getNote(),
			$keys[10] => $this->getKind(),
			$keys[11] => $this->getBirthday(),
			$keys[12] => $this->getJobtitle(),
			$keys[13] => $this->getNickname(),
			$keys[14] => $this->getPrefix(),
			$keys[15] => $this->getSuffix(),
			$keys[16] => $this->getFirstsort(),
			$keys[17] => $this->getLastsort(),
			$keys[18] => $this->getCreationdate(),
			$keys[19] => $this->getModificationdate(),
			$keys[20] => $this->getCompositenamefallback(),
			$keys[21] => $this->getExternalidentifier(),
			$keys[22] => $this->getStoreid(),
			$keys[23] => $this->getDisplayname(),
			$keys[24] => $this->getFirstsortsection(),
			$keys[25] => $this->getLastsortsection(),
			$keys[26] => $this->getFirstsortlanguageindex(),
			$keys[27] => $this->getLastsortlanguageindex(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AbpersonPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setRowid($value);
				break;
			case 1:
				$this->setFirst($value);
				break;
			case 2:
				$this->setLast($value);
				break;
			case 3:
				$this->setMiddle($value);
				break;
			case 4:
				$this->setFirstphonetic($value);
				break;
			case 5:
				$this->setMiddlephonetic($value);
				break;
			case 6:
				$this->setLastphonetic($value);
				break;
			case 7:
				$this->setOrganization($value);
				break;
			case 8:
				$this->setDepartment($value);
				break;
			case 9:
				$this->setNote($value);
				break;
			case 10:
				$this->setKind($value);
				break;
			case 11:
				$this->setBirthday($value);
				break;
			case 12:
				$this->setJobtitle($value);
				break;
			case 13:
				$this->setNickname($value);
				break;
			case 14:
				$this->setPrefix($value);
				break;
			case 15:
				$this->setSuffix($value);
				break;
			case 16:
				$this->setFirstsort($value);
				break;
			case 17:
				$this->setLastsort($value);
				break;
			case 18:
				$this->setCreationdate($value);
				break;
			case 19:
				$this->setModificationdate($value);
				break;
			case 20:
				$this->setCompositenamefallback($value);
				break;
			case 21:
				$this->setExternalidentifier($value);
				break;
			case 22:
				$this->setStoreid($value);
				break;
			case 23:
				$this->setDisplayname($value);
				break;
			case 24:
				$this->setFirstsortsection($value);
				break;
			case 25:
				$this->setLastsortsection($value);
				break;
			case 26:
				$this->setFirstsortlanguageindex($value);
				break;
			case 27:
				$this->setLastsortlanguageindex($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AbpersonPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setRowid($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFirst($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLast($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setMiddle($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFirstphonetic($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setMiddlephonetic($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setLastphonetic($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setOrganization($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setDepartment($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setNote($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setKind($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setBirthday($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setJobtitle($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setNickname($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setPrefix($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setSuffix($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setFirstsort($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setLastsort($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCreationdate($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setModificationdate($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCompositenamefallback($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setExternalidentifier($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setStoreid($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setDisplayname($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setFirstsortsection($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setLastsortsection($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setFirstsortlanguageindex($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setLastsortlanguageindex($arr[$keys[27]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AbpersonPeer::DATABASE_NAME);

		if ($this->isColumnModified(AbpersonPeer::ROWID)) $criteria->add(AbpersonPeer::ROWID, $this->rowid);
		if ($this->isColumnModified(AbpersonPeer::FIRST)) $criteria->add(AbpersonPeer::FIRST, $this->first);
		if ($this->isColumnModified(AbpersonPeer::LAST)) $criteria->add(AbpersonPeer::LAST, $this->last);
		if ($this->isColumnModified(AbpersonPeer::MIDDLE)) $criteria->add(AbpersonPeer::MIDDLE, $this->middle);
		if ($this->isColumnModified(AbpersonPeer::FIRSTPHONETIC)) $criteria->add(AbpersonPeer::FIRSTPHONETIC, $this->firstphonetic);
		if ($this->isColumnModified(AbpersonPeer::MIDDLEPHONETIC)) $criteria->add(AbpersonPeer::MIDDLEPHONETIC, $this->middlephonetic);
		if ($this->isColumnModified(AbpersonPeer::LASTPHONETIC)) $criteria->add(AbpersonPeer::LASTPHONETIC, $this->lastphonetic);
		if ($this->isColumnModified(AbpersonPeer::ORGANIZATION)) $criteria->add(AbpersonPeer::ORGANIZATION, $this->organization);
		if ($this->isColumnModified(AbpersonPeer::DEPARTMENT)) $criteria->add(AbpersonPeer::DEPARTMENT, $this->department);
		if ($this->isColumnModified(AbpersonPeer::NOTE)) $criteria->add(AbpersonPeer::NOTE, $this->note);
		if ($this->isColumnModified(AbpersonPeer::KIND)) $criteria->add(AbpersonPeer::KIND, $this->kind);
		if ($this->isColumnModified(AbpersonPeer::BIRTHDAY)) $criteria->add(AbpersonPeer::BIRTHDAY, $this->birthday);
		if ($this->isColumnModified(AbpersonPeer::JOBTITLE)) $criteria->add(AbpersonPeer::JOBTITLE, $this->jobtitle);
		if ($this->isColumnModified(AbpersonPeer::NICKNAME)) $criteria->add(AbpersonPeer::NICKNAME, $this->nickname);
		if ($this->isColumnModified(AbpersonPeer::PREFIX)) $criteria->add(AbpersonPeer::PREFIX, $this->prefix);
		if ($this->isColumnModified(AbpersonPeer::SUFFIX)) $criteria->add(AbpersonPeer::SUFFIX, $this->suffix);
		if ($this->isColumnModified(AbpersonPeer::FIRSTSORT)) $criteria->add(AbpersonPeer::FIRSTSORT, $this->firstsort);
		if ($this->isColumnModified(AbpersonPeer::LASTSORT)) $criteria->add(AbpersonPeer::LASTSORT, $this->lastsort);
		if ($this->isColumnModified(AbpersonPeer::CREATIONDATE)) $criteria->add(AbpersonPeer::CREATIONDATE, $this->creationdate);
		if ($this->isColumnModified(AbpersonPeer::MODIFICATIONDATE)) $criteria->add(AbpersonPeer::MODIFICATIONDATE, $this->modificationdate);
		if ($this->isColumnModified(AbpersonPeer::COMPOSITENAMEFALLBACK)) $criteria->add(AbpersonPeer::COMPOSITENAMEFALLBACK, $this->compositenamefallback);
		if ($this->isColumnModified(AbpersonPeer::EXTERNALIDENTIFIER)) $criteria->add(AbpersonPeer::EXTERNALIDENTIFIER, $this->externalidentifier);
		if ($this->isColumnModified(AbpersonPeer::STOREID)) $criteria->add(AbpersonPeer::STOREID, $this->storeid);
		if ($this->isColumnModified(AbpersonPeer::DISPLAYNAME)) $criteria->add(AbpersonPeer::DISPLAYNAME, $this->displayname);
		if ($this->isColumnModified(AbpersonPeer::FIRSTSORTSECTION)) $criteria->add(AbpersonPeer::FIRSTSORTSECTION, $this->firstsortsection);
		if ($this->isColumnModified(AbpersonPeer::LASTSORTSECTION)) $criteria->add(AbpersonPeer::LASTSORTSECTION, $this->lastsortsection);
		if ($this->isColumnModified(AbpersonPeer::FIRSTSORTLANGUAGEINDEX)) $criteria->add(AbpersonPeer::FIRSTSORTLANGUAGEINDEX, $this->firstsortlanguageindex);
		if ($this->isColumnModified(AbpersonPeer::LASTSORTLANGUAGEINDEX)) $criteria->add(AbpersonPeer::LASTSORTLANGUAGEINDEX, $this->lastsortlanguageindex);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AbpersonPeer::DATABASE_NAME);

		$criteria->add(AbpersonPeer::ROWID, $this->rowid);
		$criteria->add(AbpersonPeer::KIND, $this->kind);
		$criteria->add(AbpersonPeer::CREATIONDATE, $this->creationdate);
		$criteria->add(AbpersonPeer::MODIFICATIONDATE, $this->modificationdate);
		$criteria->add(AbpersonPeer::STOREID, $this->storeid);
		$criteria->add(AbpersonPeer::FIRSTSORTLANGUAGEINDEX, $this->firstsortlanguageindex);
		$criteria->add(AbpersonPeer::LASTSORTLANGUAGEINDEX, $this->lastsortlanguageindex);

		return $criteria;
	}

	/**
	 * Returns the composite primary key for this object.
	 * The array elements will be in same order as specified in XML.
	 * @return     array
	 */
	public function getPrimaryKey()
	{
		$pks = array();

		$pks[0] = $this->getRowid();

		$pks[1] = $this->getKind();

		$pks[2] = $this->getCreationdate();

		$pks[3] = $this->getModificationdate();

		$pks[4] = $this->getStoreid();

		$pks[5] = $this->getFirstsortlanguageindex();

		$pks[6] = $this->getLastsortlanguageindex();

		return $pks;
	}

	/**
	 * Set the [composite] primary key.
	 *
	 * @param      array $keys The elements of the composite key (order must match the order in XML file).
	 * @return     void
	 */
	public function setPrimaryKey($keys)
	{

		$this->setRowid($keys[0]);

		$this->setKind($keys[1]);

		$this->setCreationdate($keys[2]);

		$this->setModificationdate($keys[3]);

		$this->setStoreid($keys[4]);

		$this->setFirstsortlanguageindex($keys[5]);

		$this->setLastsortlanguageindex($keys[6]);

	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Abperson (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFirst($this->first);

		$copyObj->setLast($this->last);

		$copyObj->setMiddle($this->middle);

		$copyObj->setFirstphonetic($this->firstphonetic);

		$copyObj->setMiddlephonetic($this->middlephonetic);

		$copyObj->setLastphonetic($this->lastphonetic);

		$copyObj->setOrganization($this->organization);

		$copyObj->setDepartment($this->department);

		$copyObj->setNote($this->note);

		$copyObj->setKind($this->kind);

		$copyObj->setBirthday($this->birthday);

		$copyObj->setJobtitle($this->jobtitle);

		$copyObj->setNickname($this->nickname);

		$copyObj->setPrefix($this->prefix);

		$copyObj->setSuffix($this->suffix);

		$copyObj->setFirstsort($this->firstsort);

		$copyObj->setLastsort($this->lastsort);

		$copyObj->setCreationdate($this->creationdate);

		$copyObj->setModificationdate($this->modificationdate);

		$copyObj->setCompositenamefallback($this->compositenamefallback);

		$copyObj->setExternalidentifier($this->externalidentifier);

		$copyObj->setStoreid($this->storeid);

		$copyObj->setDisplayname($this->displayname);

		$copyObj->setFirstsortsection($this->firstsortsection);

		$copyObj->setLastsortsection($this->lastsortsection);

		$copyObj->setFirstsortlanguageindex($this->firstsortlanguageindex);

		$copyObj->setLastsortlanguageindex($this->lastsortlanguageindex);


		$copyObj->setNew(true);

		$copyObj->setRowid(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Abperson Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AbpersonPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AbpersonPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseAbperson:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseAbperson::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseAbperson
